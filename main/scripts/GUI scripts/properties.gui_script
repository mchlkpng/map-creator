globals = require("lua_modules.globals")
local types = require("lua_modules.types")
local rendercam = require("rendercam.rendercam")

local function disableAll(self)
	for i, v in pairs(self.nodes) do
		if type(v) == "table" then
			for o, u in pairs(v) do
				gui.set_enabled(u, false)
			end
		else
			gui.set_enabled(v, false)
		end
	end
end

local function enableAll(self)
	for i, v in pairs(self.nodes) do
		if type(v) == "table" then
			for o, u in pairs(v) do
				gui.set_enabled(u, true)
			end
		else
			gui.set_enabled(v, true)
		end
	end
end

local function pickAll(self, x, y)
	local picked
	local pickedtable = {}
	for i, v in pairs(self.nodes) do
		if not gui.is_enabled(v) or v == self.nodes.mouse then print("") else
		picked = gui.pick_node(v, x, y)
		table.insert(pickedtable, picked)
		end
	end

	local value = true
	for i, v in ipairs(pickedtable) do
		if v == false then
			value = false
			break
		end
	end


	return value
end

local function pickChoice(self, type, x, y)
	local pick
	local node
	if not type then return end
	for i, v in pairs(self.choices[type]) do
		pick = gui.pick_node(v, x, y)
		if pick then node = v; break end
	end
	return node or nil
end

local function update_text(self)
	self.message = self.normaltext .. self.temptext
	gui.set_text(self.choices.aot.type, "Type: " .. self.message)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.message, self.normaltext, self.temptext = "", "", ""
	self.typing = false

	self.nodes = {}
	self.choices = {grid = {}, properties = {}, aot = {}}
	self.menuOpen = false
	self.mousePosition = vmath.vector3()
	self.nodes.grid = gui.get_node("grid")
	self.nodes.mouse = gui.get_node("mouse")
	self.nodes.properties = gui.get_node("properties")
	self.nodes.aot = gui.get_node("aot") -- add object type
	self.mousePos = gui.get_node("mousePos")

	self.choices.grid.addgrid = gui.get_node("addgrid")
	self.choices.grid.removegrid = gui.get_node("removegrid")
	self.choices.grid.addobject = gui.get_node("addobject")
	self.choices.properties.name = gui.get_node("properties_name")
	self.choices.properties.default = gui.get_node("properties_default")
	self.choices.properties.typedata = gui.get_node("properties_typedata")
	self.choices.properties.events = gui.get_node("properties_events")
	self.choices.properties.listeners = gui.get_node("properties_eventlisteners")
	self.choices.properties.exit = gui.get_node("properties_exit")
	self.choices.aot.type = gui.get_node("aot_type")
	self.choices.aot.error = gui.get_node("aot_error")
	self.choices.aot.exit = gui.get_node("aot_exit")

	disableAll(self)

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	local node = pickChoice(self, self.menuOpen, self.mousePosition.x, self.mousePosition.y)
	if node ~= nil and self.menuOpen ~= false and not gui.get_text(node) then
		gui.set_color(node, vmath.vector4(0.5, 0.5, 0.5, 1))
	end
	if not node and self.menuOpen ~= false  and not hastext then
		for i, v in pairs(self.choices[self.menuOpen]) do
			local hastext
			if pcall(gui.get_text, v) then
				hastext = gui.get_text(v)
			else hastext = false
			end
			if not hastext then gui.set_color(v, vmath.vector4(0, 0, 0, 1)) end
		end

	end

	if self.typing then
		gui.set_color(self.choices.aot.type, vmath.vector4(0.2, 0.2, 0.2, 1))
	else
		gui.set_color(self.choices.aot.type, vmath.vector3(1, 1, 1, 1))
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("properties") then
		self.menuOpen = message.menu
		disableAll(self)
		gui.set_enabled(self.nodes[message.menu], true)
		gui.set_position(self.nodes[message.menu], message.props.position)
		self.cobj = rendercam.screen_to_world_2d(message.props.screenposition.x, message.props.screenposition.y)
	end

	if message_id == hash("mousepos") then
		self.MouseWorldPos = vmath.vector3(message.x, message.y, 0)
		gui.set_text(self.mousePos, "X: " .. math.floor(message.x + 0.5) .. "\nY: " .. math.floor(message.y + 0.5))
	end
end

function on_input(self, action_id, action)
	if action_id == nil and self.menuOpen ~= false then
		local thing = rendercam.world_to_screen(self.MouseWorldPos)
		local mx, my = rendercam.screen_to_gui(thing.x, thing.y, gui.ADJUST_STRETCH)
		self.mousePosition = vmath.vector3(mx, my, 0)
		gui.set_position(self.nodes.mouse, self.mousePosition)
	end

	if action_id == hash("mouse_button_left") and action.pressed then
		if not pickAll(self, action.x, action.y) and not gui.is_enabled(self.nodes.aot) then
			print(pickAll(self, action.x, action.y), action.x, action.y)
			disableAll(self)
			self.menuOpen = false
			print("poopoo")
		elseif self.menuOpen then
			local exitpicked, exit
			if self.choices[self.menuOpen].exit ~= nil then
				exit = self.choices[self.menuOpen].exit
			end
			if pcall(gui.pick_node, exit, action.x, action.y) then
				exitpicked = gui.pick_node(self.choices[self.menuOpen].exit, action.x, action.y)
			else 
				exitpicked = false
			end
			if exitpicked then
				disableAll(self)
				self.menuOpen = false
				print("peepee")
				return
			end
			local picked = pickChoice(self, self.menuOpen, action.x, action.y)
			if picked then
				if picked == self.choices.grid.addobject then
					self.menuOpen = "aot"
					gui.set_enabled(self.nodes.grid, false)
					gui.set_enabled(self.nodes.aot, true)
				end
			else
				
			end
		end

		if gui.pick_node(self.choices.aot.type, action.x, action.y) and gui.is_enabled(self.choices.aot.type)then
			if self.typing then
				self.typing = false
			else
				self.typing = true
			end
		end
	end 

	if action_id == hash("text") and string.len(gui.get_text(self.choices.aot.type)) < 45 then
		if self.typing then
			if not globals.on_mobile() then
				self.message = self.message .. action.text
				gui.set_text(self.choices.aot.type, self.message)
				print(gui.get_text(self.choices.aot.type))
			else
				self.normaltext = self.normaltext .. action.text
				self.temp_text = ""
				update_text(self)
				print(gui.get_text(self.choices.aot.type))
			end
		end
	end

	if globals.on_mobile() and action_id == hash("marked_text") and string.len(gui.get_text(self.choices.aot.type)) < 45 then
		if self.typing then
			self.temptext = action.text
			update_text(self)
			print(gui.get_text(self.choices.aot.type))
		end
	end

	if action_id == hash("key_backspace") and self.typing and action.pressed then
		if string.len(gui.get_text(self.choices.aot.type)) > 6 then
			self.normaltext = gui.get_text(self.choices.aot.type):sub(7, -2)
			self.temptext = ""
			update_text(self)
			print(gui.get_text(self.choices.aot.type))
		end
	end

	if action_id == hash("key_backspace") and self.typing and not action.pressed and action.repeated then
		if string.len(gui.get_text(self.choices.aot.type)) > 6 then
			self.normaltext = gui.get_text(self.choices.aot.type):sub(7, -2)
			self.temptext = ""
			update_text(self)
			print(gui.get_text(self.choices.aot.type))
		end
	end

	if action_id == hash("key_enter") and self.typing and action.pressed then
		self.typing = false
		local words = string.lower(string.gsub(gui.get_text(self.choices.aot.type), "Type: ", ""))
		local valid = false
		for i, v in ipairs(types) do
			if v == words then
				valid = true
				break
			end
		end

		if valid then
			print("words is ".. words)
			msg.post("/" .. words .. "_spawner#script", "spawn", {mode = "mapcreator", val = {pos = {self.cobj.x, self.cobj.y, self.cobj.z}, rotation = {0, 0, 0}, color = {1, 1, 1, 1}, size = "default"}, key = "next"})
			disableAll(self)
			self.menuOpen = false
		else
			gui.set_text(self.choices.aot.error, "Type '" .. words .. "' is not a valid object type.")
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

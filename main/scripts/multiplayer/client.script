local ColyseusClient = require("colyseus.client")

local client
local room
local globals = require("lua_modules.globals")
local json = require("lua_modules.json")

local function getModRes(mod, server)
	local serv = server
	if string.sub(server, -1) ~= "/" then serv = serv .. "/" end
	
	local worked = pcall(globals.getEncrypted, mod, true, serv, function(id, response, decTb)
		if response.status == 200 or response.status == 304 then
			local res = json.decode(decTb["/"..mod.."/resources/resources.json"])
			room:send("modres", {mod = mod, resObj = res})
		end
	end)
end

local function joinServer(domain, options)
	if not options.mapName or options.loadMap then
		error("incomplete options table. Needs to contain loadMap (boolean) [loading from server(true) or from client(false)], mapName (string), and mapJson is optional if loadMap == true")
	end
	if options.loadMap == false and not options.mapJson then
		error("needs to be mapJson if not loading map")
	end

	local hn = globals.hostname(true):gsub("http", "")
	client = ColyseusClient.new("ws"..hn)
	
	client:join_or_create("inGame", options, function(err, _room)
		if err then
			pprint("JOIN ERROR: ", err)
			return
		end

		room = _room

	end)
end

local function leaveServer(consented)
	if room then
		room:leave(consented or true)
		room = nil
	else
		print("not connected to room")
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.objs = {}
	self.statechange = {}
end


function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if room then
		if self.prevState ~= room.state then
			self.prevState = room.state
			print("state changed")

			room:on("leave", function()
				room = nil
				self.started = false
				msg.post("main:/go#main", "unload_proxy", {collection = "multiplayer"})
			end)
		end
		if #self.statechange ~= 0 then
			--for i, v in ipairs(self.statechange) do
				--print("budugnus")
				--room:send("modstatechange", {allstate = self.statechange})
				--room:send("odungus", self.statechange)
				--self.statechange = {}
				--self.statechange[i] = nil
				--break;
			--end
		end

		room:on_message("map", function(message)
			if #self.objs == 0 then
				pprint("got map")
				local sending = json.encode(message.map)
				local sen = ""
				self.map = message.map
				self.mapname = message.mapname
				self.objs = message.map[message.mapname].data
				
				for i = 1, string.len(sending) do
					sen = sen .. string.sub(sending, i, i)
					if i % 25 == 0 or i == string.len(sending) then
						msg.post("/jsonloader#mJson", "mappart", {part = sen})
						sen = ""
					end
				end
				msg.post("/jsonloader#mJson", "done", {mapname = message.mapname})
			end

			for i, v in ipairs(self.map.mods) do
				if not room.state.resources[v] then
					local server = self.map.modservers[v]
					if server == "mainserver" then server = globals.hostname(true) end
					if string.sub(server, -1) ~= "/" then server = server .. "/" end

					local worked, err = pcall(globals.getEncrypted, v, true, server, function(id, response, decTb)
						if response.status == 200 or response.status == 304 then
							local res = decTb["/"..mod.."/resources/resources.json"]
							if res then
								room:send("modres", {mod = v, resJson = decTb["/"..mod.."/resources/resources.json"]})
							else
								print("resources.json file couldnt be found for mod '" .. mod .. "'.")
							end
						else
							http.request(server.."mods/"..v.."/resources/resources.json", "GET", function(self, id, response)
								if response.status == 200 or response.status == 304 then
									room:send("modres", {mod = v, resJson = response.response})
								else
									print("resources.json file couldnt be found for mod '" .. mod .. "'.")
								end
							end)
						end
					end)

					if not worked then print(err) end
				end
			end

		end)

		room:on_message("controlling", function(message)
			pprint(message.ids)
			msg.post("/objManager#script", "control", {ids = message.ids})
		end)
	end
end

function fixed_update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("modstatechange") then
		table.insert(self.statechange, message)
		room:send("mschange", message)
	end
end

function on_input(self, action_id, action)
	if room then
		if action_id == hash("key_g") and action.pressed and not self.started then
			room:send("start")
			self.started = true
		end

		if action_id == hash("key_w") and action.pressed then
			leaveServer()
		end
	end

	if action_id == hash("key_q") and action.pressed and not room then
		local mapname = "amogus"
		joinServer(globals.hostname(true), {loadMap = false, mapName = mapname, mapJson = sys.load_resource("/res/json files/"..mapname..".json")})
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

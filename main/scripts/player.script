local globals = require "lua_modules.globals"
local rendercam = require "rendercam.rendercam"
go.property("collision", vmath.vector4(-50, 50, -137, 137))
local fps = require "metrics.fps"
local keybinds = {
	left = hash("key_left"),
	right = hash("key_right"),
	jump = hash("key_up"),
	fall = hash("key_down")
}


local function fpsUpdate(self, fps)
	--
end


function draw_line(from, to)
	msg.post("@render:", "draw_line", { start_point = from, end_point = to, color = vmath.vector4(1,0,0,1) })
end

function init(self)
	self.fps = fps.create(false, false, vmath.vector3(0, 300, 20),vmath.vector4(0, 0, 0, 1))
	self.allLoaded = false
	self.grav = 0
	self.coldown = false
	self.dir = vmath.vector3()
	msg.post(".", "acquire_input_focus")
	self.correction = vmath.vector3()
	self.comp = vmath.vector3()
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	self.fps.update()
	label.set_text("/player#label", tostring(math.floor(1/dt)))
	local speed = 500
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end
	local p = go.get_position()
	local change = p + self.dir * speed * dt
	go.set_position(change)

	self.dir.x = 0; self.dir.y = 0; self.dir.z = 0

	local from = go.get_position()
	local to = vmath.vector3(from.x, from.y - 1000, from.z)
	local result = physics.raycast(from, to, {hash("platform")})
	if result then
		draw_line(from, result.position) -- <5>
		if go.get_position().y - result.position.y <= math.abs(self.collision.z)--[[ + math.abs(self.collision.w))/2]] then
			self.grav = 0
			self.coldown = true
		else
			self.coldown = false
		end
	else
		self.coldown = false
		draw_line(from, to) -- <6>
	end

	if not self.coldown and self.allLoaded then
		local pos = go.get_position()
		go.set_position(vmath.vector3(pos.x, pos.y + (self.grav*dt), pos.z))
		self.grav =  self.grav - 2500 * dt
	end


	go.set_position(go.get_position() + self.comp)

	globals.clearVector(self.correction); globals.clearVector(self.comp)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("allLoaded") then
		print("what the heay")
		timer.delay(1, false, function()
			self.allLoaded = true
		end)
	end

	if message_id == hash("contact_point_response") then
		-- Get the info needed to move out of collision. We might
		-- get several contact points back and have to calculate
		-- how to move out of all of them by accumulating a
		-- correction vector for this frame:
		if message.distance > 0 then
			-- First, project the accumulated correction onto
			-- the penetration vector
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				self.comp = comp
				-- Accumulate correction done
				self.correction = self.correction + comp
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id == keybinds.jump and self.coldown then
		self.grav = 1000
		local pos = go.get_position()
		pos.y = pos.y + 19
		go.set_position(pos)
	end
	if action_id == keybinds.left then
		self.dir.x = -1
	end
	if action_id == keybinds.right then
		self.dir.x = 1
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
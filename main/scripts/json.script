local directory = sys.get_save_file("mpcreator", "directory.dir")
directory = directory:gsub("directory.dir", "")
local json = require("lua_modules.json")
local rendercam = require("rendercam.rendercam")
local defsave = require("defsave.defsave")
local globals = require("lua_modules.globals")


local function loadJson(self, mapName, jsonData, fromDir, callback)
	local jtable = json.decode(jsonData)
	local data = jtable[mapName].data
	msg.post("/objManager#script", "tabledatalen", {len = #data, fromDir = fromDir, collection = select(2, getCamId())})
	callback(jtable)
	for i, v in ipairs(data) do
		local url = msg.url("/" .. v.type .. "_spawner" .. "#script")
		msg.post(url, "spawn", {key = i, val = v, mode = select(2, getCamId()), mapname = mapName})
	end


	--pprint(self.jsonTable)
end

local function loadLevel(self, lvl, fromDir, callback)
	local jfile = sys.load_resource("/res/json files/" .. lvl .. ".json")
	local jtable = json.decode(jfile)
	if jtable.mods then
		for i, v in ipairs(jtable.mods) do
			local serv
			if jtable.modservers[v] == "mainserver" then
				serv = globals.hostname(true)
			else
				serv = jtable.modservers[v]
			end
			globals.getEncrypted(v, not fromDir, serv, function()print("Mod '" .. v .. "' downloaded.") end)
		end
	end
--	pprint(jtable)
	local mapName = lvl
--	pprint(jtable[mapName]["data"])
	local data = jtable[mapName].data
	msg.post("/objManager#script", "tabledatalen", {len = #data, fromDir = fromDir, collection = select(2, getCamId())})
	callback(jtable)
	for i, v in ipairs(data) do
		local url = msg.url("/" .. v.type .. "_spawner" .. "#script")
		msg.post(url, "spawn", {key = i, val = v, mode = select(2, getCamId()), lvl = lvl})
	end



end

function getCamId()
	local camera  = tostring(msg.url(go.get_id()))
	local camera = string.gsub(camera, "url: %[", "")
	local s = ""
	for i = 1, string.len(camera) do
		local e = string.sub(camera, i, i)
		if e ~= ":" then
			s = s .. e
		else
			break
		end

	end
	local collection = s

	return go.get_id(collection .. "_camera"), collection
end



function init(self)
	defsave.set_appname("mpcreator")
	print("DEFSAVE")
	local DAfile = sys.get_save_file("mpcreator", "hi.script")
	local ooo = io.open(DAfile, "w")
	ooo:write(tostring(self))
	ooo:flush()
	ooo:close()
	msg.post(".", "acquire_input_focus")
	timer.delay(1, false, function()
		--msg.post("#", "loadfMap", {map = "newMap"})
		loadLevel(self, "amogus", false, function(jtable)
			self.jsonTable = jtable
		end)
	end)

	self.camController = go.get_id("/camController")
	
end



function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if not self.doneOnce then
		self.doneOnce = true
		--timer.delay(3, false, function()msg.post("#downloader", "dMod", {server = globals.hostname(true), mod = "oldMod", redownload = false}) end)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("loadLevel") then
		loadLevel(self, message.lvl .. ".json", function(j_table)
			self.jsonTable = j_table
		end)
	end

	if message_id == hash("loadfMap") then 
		local path = directory .. "\\" .. message.map
		local p = directory .. message.map .. "\\" .. message.map .. ".json"
		local file = io.open(p, "r")
		local jso = file:read("*a")
		file:close()
		loadJson(self, message.map, jso, false, function(jtable)
			self.jsonTable = jtable
		end)
	end

	if message_id == hash("getcollection") then
		msg.post(sender, "collection", {col = select(2, getCamId())})
	end

	if message_id == hash("getserver") then
		msg.post(sender, "daserver", {server = self.jsonTable.modservers[message.mod]})
	end
end

function on_input(self, action_id, action)

end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
